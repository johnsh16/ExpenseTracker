<%= javascript_pack_tag 'account' %>

<script>
    function toggleFilter () {
        document.getElementById("filter-button-container").hidden = !document.getElementById("filter-button-container").hidden
    }
</script>


<h1 class="page-title">Account: <%= @account.name %></h1>
<a href= <%= "/accounts/edit/#{@account.id}" %><div class="btn btn-secondary">Edit Details</div></a>
<div class="btn btn-secondary" id="filter-toggle" onClick="toggleFilter()">Filter</div>
<a href="/transactions/new/"><div class="btn btn-primary">Add a new transaction</div></a>
<a href="/accounts/index"><div class="btn btn-primary">Back to Accounts</div></a>
<div><br></div>
<div id="filter-button-container" hidden>
    <a href=<%= "/accounts/#{@account.id}/filter_byGroup"%>><div class="btn btn-light" id="group-filter">Group</div></a>
    <a href=<%= "/accounts/#{@account.id}/filter_byDate_asc"%>><div class="btn btn-light" id="date-asc-filter">Date: Ascending</div></a>
    <a href=<%= "/accounts/#{@account.id}/filter_byDate_desc"%>><div class="btn btn-light" id="date-desc-filter">Date: Descending</div></a>
    <a href=<%= "/accounts/#{@account.id}" %>><div class="btn btn-danger">X</div></a>
    <div><br></div>
</div>
<h2>Balance: $<%= balance %></h2>
<% if @transactions.length != 0 %>
    <div class="container">
    <table class="table table-light">
        <tr>
            <th>Date</th>
            <th>Description</th>
            <th>Group</th>
            <th>Amount</th>
            <th>+/-</th>
            <th colspan="2">Actions...</th>
        </tr>
        <% @transactions.each do |transaction| %>
            <% if transaction.visible == true || transaction.visible == nil %>
            <tr>
                <td><%= transaction.date %></td>
                <td><%= transaction.description %></td>
                <td><%= transaction.group %></td>
                <td>$<%= transaction.amount %></td>
                <td><%= formatTransType(transaction) %></td>
                <td><a href=<%="/transactions/edit/#{transaction.id}"%>><div class="btn btn-primary">Edit</div></a></td>
                <td><a href=<%="/transactions/remove/#{transaction.id}"%>><div class="btn btn-primary">Remove</div></a></td> 
            </tr>
            <% end %>
        <% end %>
    </table>
    </div>
<% else %> 
    <% if params[:action] %>
            <h3>Filter returned no results</h3>
    <% else %>
    <h3>Account has no transactions</h3>
    <% end %>
<% end %>
<div class="container">
<canvas id="canvas" height="400"  width="600" style="background-color: 'grey'">
</div>
<script>
let testInput = {
    "accounts" : [
        {
            "name": "Account1",
            "balance": 1200
        },
        {
            "name": "Account2",
            "balance": 1500
        },
        {
            "name": "Account3",
            "balance": 3000
        },
        {
            "name": "Account4",
            "balance": 4000
        }
    ]
}
function httpGet(theUrl) {
    var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( "GET", theUrl, false ); // false for synchronous request
    xmlHttp.send( null );
    return xmlHttp.responseText;
}
console.log()
let inputObj = httpGet('/home/data/15')
console.log(inputObj)

function drawCircles_line(inputObject) {
    const canvas = document.querySelector('#canvas')
    console.log(inputObject.accounts)

    if (!canvas.getContext) {
        return;
    }
    const ctx = canvas.getContext('2d')

    ctx.strokeStyle = 'black'
    ctx.lineWidth = 5

    const numItems = inputObject.accounts.length

    //How much space do we give each dot?
    let widthDivision = canvas.width/4
    let heightDivision = canvas.height/2
    
    function largestBalance () {
        let largestBalance = 0
        for (i = 0; i<numItems; i++) {
            if (inputObject.accounts[i].balance > largestBalance) {
                largestBalance = inputObject.accounts[i].balance
            }
        }
        console.log(largestBalance)
        return largestBalance
    }

    let scale = (widthDivision-20)/(largestBalance())
    let colorArray = ['green', 'red', 'purple', 'blue']

    function fillCircle (x,y,r, color) {
        var gradient = ctx.createRadialGradient(x,y,r, x,y,r-3);
        gradient.addColorStop(0, color)
        gradient.addColorStop(0.9, 'lightgrey')
        ctx.beginPath();
        ctx.arc(x,y,r,0,2*Math.PI);
        ctx.stroke();
        ctx.fillStyle = gradient;
        ctx.fill();
    };

    ctx.font = '15px serif'

    if (inputObject.accounts[0]) {
        fillCircle((0.5*widthDivision), heightDivision, scale*inputObject.accounts[0].balance/2, colorArray[0])
        ctx.fillText(inputObject.accounts[0].name, (0.35*widthDivision), (heightDivision)+(scale*inputObject.accounts[0].balance/2)+20)
    }
    if (inputObject.accounts[1]) {
        fillCircle((1.5*widthDivision), heightDivision, scale*inputObject.accounts[1].balance/2, colorArray[1])
        ctx.fillText(inputObject.accounts[1].name, (1.35*widthDivision), (heightDivision)+(scale*inputObject.accounts[1].balance/2)+20)
    }
    if (inputObject.accounts[2]) {
        fillCircle((2.5*widthDivision), heightDivision, scale*inputObject.accounts[2].balance/2, colorArray[2])
        ctx.fillText(inputObject.accounts[2].name, (2.35*widthDivision), (heightDivision)+(scale*inputObject.accounts[2].balance/2)+20)
    }
    if (inputObject.accounts[3]) {
        fillCircle((3.5*widthDivision), heightDivision, scale*inputObject.accounts[3].balance/2, colorArray[3])
        ctx.fillText(inputObject.accounts[3].name, (3.35*widthDivision), (heightDivision)+(scale*inputObject.accounts[3].balance/2)+20)
    }
}
drawCircles_line(JSON.parse(inputObj))
</script>

